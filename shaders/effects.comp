#version 460 core

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
// OLD: used when drawing to raw textures instead of a framebuffer.
// ------------------------------------------------------------------
//layout (binding = 0, rgba32f) uniform readonly image2D imageInput;
//layout (binding = 0, rgba32f) uniform writeonly image2D imageOutput;
// ------------------------------------------------------------------
layout (binding = 0, rgba32f) uniform image2D image;

uniform vec3 colorMod;
uniform float deltaTime;
uniform float diffuseSpeed;
uniform float evaporationSpeed;
uniform bool shouldBlur;
uniform bool isRunning;

void main() {

    if (isRunning) {
        ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
        vec4 original = imageLoad(image, coords);
        ivec2 imageSize = imageSize(image);
        // Basic gaussian blur
        vec4 blur;
        if (shouldBlur) {
            vec4 sum = vec4(0.0);
            for (int i = -1; i <= 1; i++) {
                for (int j = -1; j <= 1; j++) {
                    ivec2 neighborCoords = ivec2(coords.x + i, coords.y + j);
                    if (neighborCoords.x >= 0 && neighborCoords.x < imageSize.x && neighborCoords.y >= 0 && neighborCoords.y <= imageSize.y) {
                        sum += imageLoad(image, neighborCoords);
                    }
                }
            }
            blur = sum / 9.0;
        } else {
            blur = original;
        }


        vec4 diffusedBlur = mix(original, blur, diffuseSpeed * deltaTime);
        vec4 evaporatedAndDiffusedBlur = diffusedBlur - evaporationSpeed * deltaTime;

        vec4 processedValue = vec4(evaporatedAndDiffusedBlur.r - colorMod.x, evaporatedAndDiffusedBlur.g - colorMod.y, evaporatedAndDiffusedBlur.b - colorMod.z, evaporatedAndDiffusedBlur.a);

        imageStore(image, coords, processedValue);
    }

}